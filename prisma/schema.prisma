datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String?
  surname     String?
  phone       String?
  dateOfBirth DateTime? // ✅ Ημερομηνία γέννησης (προαιρετική)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        String    @default("user")
  sessions    Session[]
  accounts    Account[]
  favourites  Favourite[]
  bookings    Booking[]
}


model Session {
  id            Int      @id @default(autoincrement()) // Unique identifier for session
  userId        Int      // Foreign key to User model
  sessionToken  String   @unique // Unique session token
  expires       DateTime // Expiration date of the session
  user          User     @relation(fields: [userId], references: [id]) // Relate session to user
}

model Account {
  id                    Int      @id @default(autoincrement()) // Unique identifier for account
  userId                Int      // Foreign key to User model
  provider              String   // Authentication provider (e.g., Google, Facebook)
  providerAccountId     String   // Provider-specific account ID (e.g., Google user ID)
  user                  User     @relation(fields: [userId], references: [id]) // Relate account to user
}

// New model to store User's Favourites (experiences)
model Favourite {
  id            Int      @id @default(autoincrement()) // Unique identifier for the favourite
  userId        Int      // Foreign key to User model
  experienceId  Int      // Foreign key to Experience (or whatever you are storing for experiences)
  user          User     @relation(fields: [userId], references: [id]) // Relate favourite to user
  experience    Experience @relation(fields: [experienceId], references: [id]) // Relate favourite to experience
}

// New model to store Bookings made by Users
model Booking {
  id            Int      @id @default(autoincrement()) // Unique identifier for booking
  userId        Int      // Foreign key to User model
  experienceId  Int      // Foreign key to Experience (or whatever you are storing for experiences)
  date          DateTime // Date of booking
  user          User     @relation(fields: [userId], references: [id]) // Relate booking to user
  experience    Experience @relation(fields: [experienceId], references: [id]) // Relate booking to experience
}

// Assuming you have an Experience model to store details about experiences
model Experience {
  id            Int      @id @default(autoincrement()) // Unique identifier for an experience
  name          String   // Experience name
  description   String?  // Optional description of the experience
  price         Float    @default(85) // Default value for price (€85)
  location      String   @default("Chania, Crete") // Default location
  whatsIncluded String?  // "Hands-on olive harvesting..."
  whatToBring   String?  // "Wear comfortable clothes..."
  whyYoullLove  String?  // "Connect with nature..."
  duration      String? 
  // Use Json type for storing arrays
  images        Json?    // Store image URLs as JSON array
  mapPin        String?  // URL or coordinates for the map pin
  guestReviews  Json?    // Store reviews as JSON array
  favourites  Favourite[] // One-to-many relationship with favourites
  bookings    Booking[]   // One-to-many relationship with bookings
}
