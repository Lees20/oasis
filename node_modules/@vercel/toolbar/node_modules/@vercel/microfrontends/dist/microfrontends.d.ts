import { M as MicrofrontendConfigIsomorphic, C as ConfigMeta, D as DefaultApplication } from './index-2b59c627.js';
import { a as ChildConfig, M as MainConfig, C as Config } from './index-2f78c0ca.js';
import { O as OverridesConfig } from './types-b6d38aea.js';
import './types-4ef2bddb.js';

declare class MicrofrontendChildConfig extends MicrofrontendConfigIsomorphic {
    isMainConfig: boolean;
    partOf?: string;
    constructor({ config, overrides, meta, }: {
        config: ChildConfig;
        overrides?: OverridesConfig;
        meta: ConfigMeta;
    });
}

declare class MicrofrontendMainConfig extends MicrofrontendConfigIsomorphic {
    isMainConfig: boolean;
    defaultApplication: DefaultApplication;
    constructor({ config, overrides, meta, }: {
        config: MainConfig;
        overrides?: OverridesConfig;
        meta: ConfigMeta;
    });
}

type MicrofrontendsConfig = MicrofrontendChildConfig | MicrofrontendMainConfig;

declare class Microfrontends {
    config: MicrofrontendsConfig;
    constructor({ config, overrides, meta, }: {
        config: Config;
        overrides?: OverridesConfig;
        meta: ConfigMeta;
    });
    isChildConfig(): boolean;
    static fromEnv({ cookies, meta, }: {
        cookies?: {
            name: string;
            value: string;
        }[];
        meta: ConfigMeta;
    }): Microfrontends;
}

export { Microfrontends };
