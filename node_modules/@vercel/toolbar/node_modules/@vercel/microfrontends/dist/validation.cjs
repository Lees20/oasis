"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/schema/validation.ts
var validation_exports = {};
__export(validation_exports, {
  validateSchema: () => validateSchema
});
module.exports = __toCommonJS(validation_exports);

// src/config/microfrontends/server/validation.ts
var import_jsonc_parser = require("jsonc-parser");
var import_ajv = require("ajv");

// src/config/errors.ts
var MicrofrontendError = class extends Error {
  constructor(message, opts) {
    super(message, { cause: opts?.cause });
    this.name = "MicrofrontendsError";
    this.source = opts?.source ?? "@vercel/microfrontends";
    this.type = opts?.type ?? "unknown";
    this.subtype = opts?.subtype;
    Error.captureStackTrace(this, MicrofrontendError);
  }
  isKnown() {
    return this.type !== "unknown";
  }
  isUnknown() {
    return !this.isKnown();
  }
  /**
   * Converts an error to a MicrofrontendsError.
   * @param original - The original error to convert.
   * @returns The converted MicrofrontendsError.
   */
  static convert(original, opts) {
    if (opts?.fileName) {
      const err = MicrofrontendError.convertFSError(original, opts.fileName);
      if (err) {
        return err;
      }
    }
    if (original.message.includes(
      "Code generation from strings disallowed for this context"
    )) {
      return new MicrofrontendError(original.message, {
        type: "config",
        subtype: "unsupported_validation_env",
        source: "ajv"
      });
    }
    return new MicrofrontendError(original.message);
  }
  static convertFSError(original, fileName) {
    if (original instanceof Error && "code" in original) {
      if (original.code === "ENOENT") {
        return new MicrofrontendError(`Could not find "${fileName}"`, {
          type: "config",
          subtype: "unable_to_read_file",
          source: "fs"
        });
      }
      if (original.code === "EACCES") {
        return new MicrofrontendError(
          `Permission denied while accessing "${fileName}"`,
          {
            type: "config",
            subtype: "invalid_permissions",
            source: "fs"
          }
        );
      }
    }
    if (original instanceof SyntaxError) {
      return new MicrofrontendError(
        `Failed to parse "${fileName}": Invalid JSON format.`,
        {
          type: "config",
          subtype: "invalid_syntax",
          source: "fs"
        }
      );
    }
    return null;
  }
  /**
   * Handles an unknown error and returns a MicrofrontendsError instance.
   * @param err - The error to handle.
   * @returns A MicrofrontendsError instance.
   */
  static handle(err, opts) {
    if (err instanceof MicrofrontendError) {
      return err;
    }
    if (err instanceof Error) {
      return MicrofrontendError.convert(err, opts);
    }
    if (typeof err === "object" && err !== null) {
      if ("message" in err && typeof err.message === "string") {
        return MicrofrontendError.convert(new Error(err.message), opts);
      }
    }
    return new MicrofrontendError("An unknown error occurred");
  }
};

// schema/schema.json
var schema_default = {
  $schema: "http://json-schema.org/draft-07/schema#",
  $ref: "#/definitions/Config",
  definitions: {
    Config: {
      anyOf: [
        {
          $ref: "#/definitions/MainConfig"
        },
        {
          $ref: "#/definitions/ChildConfig"
        }
      ]
    },
    MainConfig: {
      type: "object",
      properties: {
        $schema: {
          type: "string"
        },
        version: {
          type: "string",
          const: "1"
        },
        options: {
          $ref: "#/definitions/Options"
        },
        applications: {
          $ref: "#/definitions/ApplicationRouting",
          description: "Mapping of application names to the routes that they host. Only needs to be defined in the application that owns the primary microfrontend domain"
        }
      },
      required: ["applications"],
      additionalProperties: false
    },
    Options: {
      type: "object",
      properties: {
        vercel: {
          $ref: "#/definitions/VercelOptions",
          description: "Microfrontends wide options for Vercel.",
          deprecated: "This is being replaced by the `disableOverrides` field below."
        },
        disableOverrides: {
          type: "boolean",
          description: "If you want to disable the overrides for the site. For example, if you are managing rewrites between applications externally, you may wish to disable the overrides on the toolbar as they will have no effect."
        },
        localProxy: {
          $ref: "#/definitions/LocalProxyOptions",
          description: "Options for local proxy.",
          deprecated: "This is being replaced by the `localProxyPort` field below."
        },
        localProxyPort: {
          type: "number",
          description: "The port number used by the local proxy server.\n\nThe default is `3024`."
        }
      },
      additionalProperties: false
    },
    VercelOptions: {
      type: "object",
      properties: {
        disableOverrides: {
          type: "boolean",
          description: "If you want to disable the overrides for the site. For example, if you are managing rewrites between applications externally, you may wish to disable the overrides on the toolbar as they will have no effect."
        }
      },
      additionalProperties: false
    },
    LocalProxyOptions: {
      type: "object",
      properties: {
        port: {
          type: "number",
          description: "The port number used by the local proxy server.\n\nThe default is `3024`."
        }
      },
      additionalProperties: false
    },
    ApplicationRouting: {
      type: "object",
      additionalProperties: {
        $ref: "#/definitions/Application"
      },
      propertyNames: {
        description: "The unique identifier for a Microfrontend Application. Must match the `name` field of the application's `package.json`."
      }
    },
    Application: {
      anyOf: [
        {
          $ref: "#/definitions/DefaultApplication"
        },
        {
          $ref: "#/definitions/ChildApplication"
        }
      ]
    },
    DefaultApplication: {
      type: "object",
      properties: {
        vercel: {
          $ref: "#/definitions/Vercel",
          deprecated: "This is being replaced by the `projectId` field below."
        },
        projectId: {
          type: "string",
          description: "Vercel project ID"
        },
        production: {
          $ref: "#/definitions/HostConfig",
          deprecated: "This is a duplicate of the `development.fallback` field and this will be removed soon."
        },
        development: {
          $ref: "#/definitions/Development"
        }
      },
      additionalProperties: false
    },
    Vercel: {
      type: "object",
      properties: {
        projectId: {
          type: "string",
          description: "Vercel project ID"
        }
      },
      required: ["projectId"],
      additionalProperties: false
    },
    HostConfig: {
      type: "object",
      properties: {
        protocol: {
          type: "string",
          enum: ["http", "https"],
          description: "The protocol to be used for the connection.\n- `http`: Hypertext Transfer Protocol (HTTP).\n- `https`: Secure Hypertext Transfer Protocol (HTTPS).\n\n*"
        },
        host: {
          type: "string",
          description: "The hostname or IP address of the server. This can be a domain name (e.g., `example.com`) or an IP address (e.g., `192.168.1.1`)."
        },
        port: {
          type: "number",
          description: "The port number to be used for the connection. Common values include `80` for HTTP and `443` for HTTPS."
        }
      },
      required: ["host"],
      additionalProperties: false
    },
    Development: {
      type: "object",
      properties: {
        local: {
          $ref: "#/definitions/LocalHostConfig",
          deprecated: "This is being replaced by the `localPort` field below."
        },
        localPort: {
          type: "number",
          description: "The local port number that this application runs on when it is running locally. Common values include `80` for HTTP and `443` for HTTPS."
        },
        fallback: {
          anyOf: [
            {
              $ref: "#/definitions/HostConfig"
            },
            {
              type: "string"
            }
          ],
          description: "Fallback for local development, could be a host config that points to any environment. If this is not provided, or the application is not running - requests to the application in local development will error.\n\nIf passing a string, include the protocol (optional), host (required) and port (optional). For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTPS. If omitted, the port defaults to `80` for HTTP and `443` for HTTPS."
        },
        task: {
          type: "string",
          description: "Optional task to run when starting the development server. Should reference a script in the package.json of the application."
        }
      },
      additionalProperties: false
    },
    LocalHostConfig: {
      type: "object",
      additionalProperties: false,
      properties: {
        host: {
          type: "string",
          description: "The hostname or IP address of the server. This can be a domain name (e.g., `example.com`) or an IP address (e.g., `192.168.1.1`)."
        },
        protocol: {
          type: "string",
          enum: ["http", "https"],
          description: "The protocol to be used for the connection.\n- `http`: Hypertext Transfer Protocol (HTTP).\n- `https`: Secure Hypertext Transfer Protocol (HTTPS).\n\n*"
        },
        port: {
          type: "number",
          description: "The port number to be used for the connection. Common values include `80` for HTTP and `443` for HTTPS."
        }
      }
    },
    ChildApplication: {
      type: "object",
      properties: {
        vercel: {
          $ref: "#/definitions/Vercel",
          deprecated: "This is being replaced by the `projectId` field below."
        },
        projectId: {
          type: "string",
          description: "Vercel project ID"
        },
        production: {
          $ref: "#/definitions/HostConfig",
          deprecated: "This is a duplicate of the `development.fallback` field and this will be removed soon."
        },
        development: {
          $ref: "#/definitions/Development"
        },
        routing: {
          $ref: "#/definitions/Routing",
          description: "Groups of path expressions that are routed to this application."
        }
      },
      required: ["routing"],
      additionalProperties: false
    },
    Routing: {
      type: "array",
      items: {
        $ref: "#/definitions/PathGroup"
      }
    },
    PathGroup: {
      type: "object",
      properties: {
        group: {
          type: "string",
          description: "Optional group name for the paths"
        },
        flag: {
          type: "string",
          description: "flag name that can be used to enable/disable all paths in the group"
        },
        paths: {
          type: "array",
          items: {
            type: "string"
          }
        }
      },
      required: ["paths"],
      additionalProperties: false
    },
    ChildConfig: {
      type: "object",
      properties: {
        $schema: {
          type: "string"
        },
        version: {
          type: "string",
          const: "1"
        },
        options: {
          $ref: "#/definitions/Options"
        },
        partOf: {
          type: "string",
          description: "Applications that only serve a subset of the microfrontend routes only need to reference the name of the primary application that owns the full microfrontends configuration."
        }
      },
      required: ["partOf"],
      additionalProperties: false
    }
  }
};

// src/config/schema/utils/load.ts
var SCHEMA = schema_default;

// src/config/microfrontends/server/validation.ts
function filterAjvErrors(errors) {
  if (!errors) {
    return [];
  }
  return errors.filter((error) => {
    return error.keyword === "additionalProperties" || error.keyword === "required";
  });
}
function validateSchema(configString) {
  const parsedConfig = (0, import_jsonc_parser.parse)(configString);
  const ajv = new import_ajv.Ajv();
  const validate = ajv.compile(SCHEMA);
  const isValid = validate(parsedConfig);
  if (!isValid) {
    throw new MicrofrontendError(
      `Invalid microfrontends config:
 - ${ajv.errorsText(filterAjvErrors(validate.errors), { separator: "\n - " })}

See https://openapi.vercel.sh/microfrontends.json for the schema.`,
      { type: "config", subtype: "does_not_match_schema" }
    );
  }
  return parsedConfig;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  validateSchema
});
//# sourceMappingURL=validation.cjs.map