type Config = MainConfig | ChildConfig;
interface CommonConfig {
    $schema?: string;
    version?: '1';
    options?: Options;
}
interface MainConfig extends CommonConfig {
    /**
     * Mapping of application names to the routes that they host.
     * Only needs to be defined in the application that owns the primary
     * microfrontend domain
     */
    applications: ApplicationRouting;
}
interface ChildConfig extends CommonConfig {
    /**
     * Applications that only serve a subset of the microfrontend routes
     * only need to reference the name of the primary application that owns the
     * full microfrontends configuration.
     */
    partOf: string;
}
type ApplicationRouting = Record<ApplicationId, Application>;
/**
 * The unique identifier for a Microfrontend Application.
 * Must match the `name` field of the application's `package.json`.
 */
type ApplicationId = string;
type Routing = PathGroup[];
interface PathGroup {
    /**
     * Optional group name for the paths
     */
    group?: string;
    /**
     * flag name that can be used to enable/disable all paths in the group
     */
    flag?: string;
    paths: string[];
}
interface HostConfig {
    /**
     * The protocol to be used for the connection.
     * - `http`: Hypertext Transfer Protocol (HTTP).
     * - `https`: Secure Hypertext Transfer Protocol (HTTPS).
     *
     * * @defaultValue "http" for local development, "https" for otherwise
     */
    protocol?: 'http' | 'https';
    /**
     * The hostname or IP address of the server.
     * This can be a domain name (e.g., `example.com`) or an IP address (e.g., `192.168.1.1`).
     */
    host: string;
    /**
     * The port number to be used for the connection.
     * Common values include `80` for HTTP and `443` for HTTPS.
     */
    port?: number;
}
type LocalHostConfig = Omit<HostConfig, 'host'> & {
    /**
     * The hostname or IP address of the server.
     * This can be a domain name (e.g., `example.com`) or an IP address (e.g., `192.168.1.1`).
     */
    host?: string;
};
interface Development {
    /**
     * @deprecated This is being replaced by the `localPort` field below.
     */
    local?: LocalHostConfig;
    /**
     * The local port number that this application runs on when it is running locally.
     * Common values include `80` for HTTP and `443` for HTTPS.
     */
    localPort?: number;
    /**
     * Fallback for local development, could be a host config that points to any environment.
     * If this is not provided, or the application is not running - requests to the application
     * in local development will error.
     *
     * If passing a string, include the protocol (optional), host (required) and port (optional).
     * For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTPS. If
     * omitted, the port defaults to `80` for HTTP and `443` for HTTPS.
     */
    fallback?: HostConfig | string;
    /**
     * Optional task to run when starting the development server. Should reference a script in the package.json of the application.
     *
     * @defaultValue "dev"
     */
    task?: string;
}
type Application = DefaultApplication | ChildApplication;
interface CommonApplication {
    /**
     * @deprecated This is being replaced by the `projectId` field below.
     */
    vercel?: Vercel;
    /**
     * Vercel project ID
     */
    projectId?: string;
    /**
     * @deprecated This is a duplicate of the `development.fallback` field and this will be removed soon.
     */
    production?: HostConfig;
}
interface DefaultApplication extends CommonApplication {
    development?: Development;
}
interface ChildApplication extends CommonApplication {
    development?: Development;
    /**
     * Groups of path expressions that are routed to this application.
     */
    routing: Routing;
}
interface Vercel {
    /**
     * Vercel project ID
     */
    projectId: string;
}
interface VercelOptions {
    /**
     * If you want to disable the overrides for the site. For example, if you are managing rewrites
     * between applications externally, you may wish to disable the overrides on the toolbar as
     * they will have no effect.
     */
    disableOverrides?: boolean;
}
interface Options {
    /**
     * Microfrontends wide options for Vercel.
     *
     * @deprecated This is being replaced by the `disableOverrides` field below.
     */
    vercel?: VercelOptions;
    /**
     * If you want to disable the overrides for the site. For example, if you are managing rewrites
     * between applications externally, you may wish to disable the overrides on the toolbar as
     * they will have no effect.
     */
    disableOverrides?: boolean;
    /**
     * Options for local proxy.
     *
     * @deprecated This is being replaced by the `localProxyPort` field below.
     */
    localProxy?: LocalProxyOptions;
    /**
     * The port number used by the local proxy server.
     *
     * The default is `3024`.
     */
    localProxyPort?: number;
}
interface LocalProxyOptions {
    /**
     * The port number used by the local proxy server.
     *
     * The default is `3024`.
     */
    port?: number;
}

export { ApplicationId as A, Config as C, DefaultApplication as D, HostConfig as H, LocalHostConfig as L, MainConfig as M, PathGroup as P, ChildConfig as a, ChildApplication as b, Application as c };
