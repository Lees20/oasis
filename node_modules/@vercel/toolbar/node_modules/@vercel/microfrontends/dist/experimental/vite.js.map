{"version":3,"sources":["../../src/config/microfrontends/server/index.ts","../../src/config/overrides/constants.ts","../../src/config/overrides/is-override-cookie.ts","../../src/config/overrides/get-override-from-cookie.ts","../../src/config/overrides/parse-overrides.ts","../../src/config/errors.ts","../../src/config/microfrontends-config/utils/get-config-from-env.ts","../../src/config/microfrontends-config/isomorphic/index.ts","../../src/config/schema/utils/is-main-config.ts","../../src/config/schema/utils/is-default-app.ts","../../src/config/microfrontends-config/client/index.ts","../../src/config/microfrontends-config/isomorphic/validation.ts","../../src/config/microfrontends-config/isomorphic/utils/generate-asset-prefix.ts","../../src/config/microfrontends-config/isomorphic/utils/generate-port.ts","../../src/config/microfrontends-config/isomorphic/host.ts","../../src/config/microfrontends-config/isomorphic/application.ts","../../src/config/microfrontends-config/isomorphic/constants.ts","../../src/config/microfrontends-config/isomorphic/child.ts","../../src/config/microfrontends-config/isomorphic/main.ts","../../src/config/microfrontends/isomorphic/index.ts","../../src/config/microfrontends/utils/find-repository-root.ts","../../src/config/microfrontends/utils/find-package-path.ts","../../src/config/microfrontends/utils/find-default-package.ts","../../src/config/constants.ts","../../src/config/microfrontends/utils/is-monorepo.ts","../../src/config/microfrontends/utils/find-package-root.ts","../../src/config/microfrontends/utils/find-config.ts","../../src/config/microfrontends/utils/get-application-context.ts","../../src/config/microfrontends/server/utils/get-output-file-path.ts","../../src/config/microfrontends/server/constants.ts","../../src/config/microfrontends/server/validation.ts","../../schema/schema.json","../../src/config/schema/utils/load.ts","../../src/vite/detect-framework.ts","../../src/vite/index.ts"],"sourcesContent":["import fs from 'node:fs';\nimport { dirname } from 'node:path';\nimport type { ConfigMeta } from '../../microfrontends-config/isomorphic';\nimport type { Config } from '../../schema/types';\nimport { parseOverrides } from '../../overrides';\nimport type { OverridesConfig } from '../../overrides';\nimport { getConfigStringFromEnv } from '../../microfrontends-config/utils/get-config-from-env';\nimport { MicrofrontendError } from '../../errors';\nimport { Microfrontends } from '../isomorphic';\nimport { isMainConfig } from '../../schema/utils/is-main-config';\nimport { isDefaultApp } from '../../schema/utils/is-default-app';\nimport { findRepositoryRoot } from '../utils/find-repository-root';\nimport { findPackagePath } from '../utils/find-package-path';\nimport { findDefaultMicrofrontendsPackage } from '../utils/find-default-package';\nimport { isMonorepo as isRepositoryMonorepo } from '../utils/is-monorepo';\nimport { findPackageRoot } from '../utils/find-package-root';\nimport { findConfig } from '../utils/find-config';\nimport { getApplicationContext } from '../utils/get-application-context';\nimport { getOutputFilePath } from './utils/get-output-file-path';\nimport { validateSchema } from './validation';\n\nexport class MicrofrontendsServer extends Microfrontends {\n  /**\n   * Writes the configuration to a file.\n   */\n  writeConfig(\n    opts: {\n      pretty?: boolean;\n    } = {\n      pretty: true,\n    },\n  ): void {\n    const outputPath = getOutputFilePath();\n\n    // ensure the directory exists\n    fs.mkdirSync(dirname(outputPath), { recursive: true });\n    fs.writeFileSync(\n      outputPath,\n      JSON.stringify(\n        this.config.toSchemaJson(),\n        null,\n        (opts.pretty ?? true) ? 2 : undefined,\n      ),\n    );\n  }\n\n  // --------- Static Methods ---------\n\n  /**\n   * Generates a MicrofrontendsServer instance from an unknown object.\n   */\n  static fromUnknown({\n    config,\n    cookies,\n    meta,\n  }: {\n    config: unknown;\n    cookies?: { name: string; value: string }[];\n    meta: ConfigMeta;\n  }): MicrofrontendsServer {\n    const overrides = cookies ? parseOverrides(cookies) : undefined;\n    if (typeof config === 'string') {\n      return new MicrofrontendsServer({\n        config: MicrofrontendsServer.validate(config),\n        overrides,\n        meta,\n      });\n    }\n    if (typeof config === 'object') {\n      return new MicrofrontendsServer({\n        config: config as Config,\n        overrides,\n        meta,\n      });\n    }\n\n    throw new MicrofrontendError(\n      'Invalid config: must be a string or an object',\n      { type: 'config', subtype: 'does_not_match_schema' },\n    );\n  }\n\n  /**\n   * Generates a MicrofrontendsServer instance from the environment.\n   * Uses additional validation that is only available when in a node runtime\n   */\n  static fromEnv({\n    cookies,\n    meta,\n  }: {\n    cookies: { name: string; value: string }[];\n    meta: ConfigMeta;\n  }): MicrofrontendsServer {\n    return new MicrofrontendsServer({\n      config: MicrofrontendsServer.validate(getConfigStringFromEnv()),\n      overrides: parseOverrides(cookies),\n      meta,\n    });\n  }\n\n  /**\n   * Validates the configuration against the JSON schema\n   */\n  static validate(config: string | Config): Config {\n    if (typeof config === 'string') {\n      const c = validateSchema(config);\n      return c;\n    }\n    return config;\n  }\n\n  /**\n   * Looks up the configuration by inferring the package root and looking for a microfrontends config file. If a file is not found,\n   * it will look for a package in the repository with a microfrontends file that contains the current application\n   * and use that configuration.\n   *\n   * This can return either a Child or Main configuration.\n   */\n  static infer({\n    directory,\n    filePath,\n    meta,\n    cookies,\n    options,\n  }: {\n    directory?: string;\n    filePath?: string;\n    meta?: ConfigMeta;\n    cookies?: { name: string; value: string }[];\n    options?: { resolveMainConfig?: boolean };\n  } = {}): MicrofrontendsServer {\n    if (filePath && meta) {\n      return MicrofrontendsServer.fromFile({\n        filePath,\n        cookies,\n        meta,\n        options,\n      });\n    }\n\n    try {\n      const packageRoot = findPackageRoot(directory);\n      const { name: appName } = getApplicationContext({ packageRoot });\n\n      const configMeta = meta ?? { fromApp: appName };\n      // see if we have a config file at the package root\n      const maybeConfig = findConfig({ dir: packageRoot });\n      if (maybeConfig) {\n        return MicrofrontendsServer.fromFile({\n          filePath: maybeConfig,\n          cookies,\n          meta: configMeta,\n          options,\n        });\n      }\n\n      // if we don't have a microfrontends configuration file, see if we have another package in the repo that references this one\n      const repositoryRoot = findRepositoryRoot();\n      const isMonorepo = isRepositoryMonorepo({ repositoryRoot });\n      if (isMonorepo) {\n        // find the default package\n        const defaultPackage = findDefaultMicrofrontendsPackage({\n          repositoryRoot,\n          applicationName: appName,\n        });\n\n        // see if we have a config file at the package root\n        const maybeConfigFromDefault = findConfig({ dir: defaultPackage });\n        if (maybeConfigFromDefault) {\n          return MicrofrontendsServer.fromFile({\n            filePath: maybeConfigFromDefault,\n            cookies,\n            meta: configMeta,\n            options,\n          });\n        }\n      }\n      // will be caught below\n      throw new Error('Unable to infer');\n    } catch (e) {\n      // we were unable to infer\n      throw new MicrofrontendError(\n        'Unable to locate and parse microfrontends configuration',\n        { cause: e, type: 'config', subtype: 'inference_failed' },\n      );\n    }\n  }\n\n  /*\n   * Generates a MicrofrontendsServer instance from a file.\n   */\n  static fromFile({\n    filePath,\n    cookies,\n    meta,\n    options,\n  }: {\n    filePath: string;\n    meta: ConfigMeta;\n    cookies?: { name: string; value: string }[];\n    options?: { resolveMainConfig?: boolean };\n  }): MicrofrontendsServer {\n    try {\n      const configJson = fs.readFileSync(filePath, 'utf-8');\n      const config = MicrofrontendsServer.validate(configJson);\n      // we want the main config, but this config at the given path is not a main config - we'll try and look it up\n      if (!isMainConfig(config) && options?.resolveMainConfig) {\n        const repositoryRoot = findRepositoryRoot();\n        const isMonorepo = isRepositoryMonorepo({ repositoryRoot });\n        // sourcing the main config from a child application is only supported in monorepos\n        if (isMonorepo) {\n          const packagePath = findPackagePath({\n            repositoryRoot,\n            name: config.partOf,\n          });\n\n          if (!packagePath) {\n            throw new MicrofrontendError(\n              `Could not find default application \"${config.partOf}\" in the repository`,\n              { type: 'config', subtype: 'not_found' },\n            );\n          }\n\n          const maybeConfig = findConfig({ dir: packagePath });\n          if (!maybeConfig) {\n            throw new MicrofrontendError(\n              `Could not find microfrontends configuration in ${packagePath}`,\n              { type: 'config', subtype: 'not_found' },\n            );\n          }\n\n          return MicrofrontendsServer.fromMainConfigFile({\n            filePath: maybeConfig,\n            overrides: cookies ? parseOverrides(cookies) : undefined,\n          });\n        }\n      }\n\n      return new MicrofrontendsServer({\n        config,\n        overrides: cookies ? parseOverrides(cookies) : undefined,\n        meta,\n      });\n    } catch (e) {\n      throw MicrofrontendError.handle(e, {\n        fileName: filePath,\n      });\n    }\n  }\n\n  /*\n   * Generates a MicrofrontendMainConfig instance from a file.\n   */\n  static fromMainConfigFile({\n    filePath,\n    overrides,\n  }: {\n    filePath: string;\n    overrides?: OverridesConfig;\n  }): MicrofrontendsServer {\n    try {\n      const config = fs.readFileSync(filePath, 'utf-8');\n      const validatedConfig = MicrofrontendsServer.validate(config);\n      if (!isMainConfig(validatedConfig)) {\n        throw new MicrofrontendError(\n          `${filePath} is not a main microfrontend config`,\n          {\n            type: 'config',\n            subtype: 'invalid_main_path',\n          },\n        );\n      }\n      const [defaultApplication] = Object.entries(validatedConfig.applications)\n        .filter(([, app]) => isDefaultApp(app))\n        .map(([name]) => name);\n      // This should never get hit as MicrofrontendsServer.validate checks this if we're given a main config\n      if (!defaultApplication) {\n        throw new MicrofrontendError(\n          'No default application found. At least one application needs to be the default by omitting routing.',\n          { type: 'config', subtype: 'no_default_application' },\n        );\n      }\n      return new MicrofrontendsServer({\n        config: validatedConfig,\n        overrides,\n        meta: { fromApp: defaultApplication },\n      });\n    } catch (e) {\n      throw MicrofrontendError.handle(e, {\n        fileName: filePath,\n      });\n    }\n  }\n}\n","// cookie name needs to match proxy\n// https://github.com/vercel/proxy/blob/fb00d723136ad539a194e4a851dd272010527c35/lib/routing/micro_frontends_overrides.lua#L7\nexport const OVERRIDES_COOKIE_PREFIX = 'vercel-micro-frontends-override';\nexport const OVERRIDES_ENV_COOKIE_PREFIX = `${OVERRIDES_COOKIE_PREFIX}:env:`;\n","import { OVERRIDES_COOKIE_PREFIX } from './constants';\n\nexport function isOverrideCookie(cookie: { name?: string }): boolean {\n  return Boolean(cookie.name?.startsWith(OVERRIDES_COOKIE_PREFIX));\n}\n","import { isOverrideCookie } from './is-override-cookie';\nimport { OVERRIDES_ENV_COOKIE_PREFIX } from './constants';\n\nexport function getOverrideFromCookie(cookie: {\n  name: string;\n  value?: string | null;\n}): { application: string; host: string } | undefined {\n  if (!isOverrideCookie(cookie) || !cookie.value) return;\n  return {\n    application: cookie.name.replace(OVERRIDES_ENV_COOKIE_PREFIX, ''),\n    host: cookie.value,\n  };\n}\n","import type { OverridesConfig } from './types';\nimport { getOverrideFromCookie } from './get-override-from-cookie';\n\nexport function parseOverrides(\n  cookies: { name: string; value?: string | null }[],\n): OverridesConfig {\n  const overridesConfig: OverridesConfig = { applications: {} };\n\n  cookies.forEach((cookie) => {\n    const override = getOverrideFromCookie(cookie);\n    if (!override) return;\n    overridesConfig.applications[override.application] = {\n      environment: { host: override.host },\n    };\n  });\n\n  return overridesConfig;\n}\n","export type MicrofrontendErrorType =\n  | 'config'\n  | 'packageJson'\n  | 'vercelJson'\n  | 'application'\n  | 'unknown';\n\nexport type MicrofrontendErrorSubtype =\n  | 'not_found'\n  | 'inference_failed'\n  | 'not_found_in_env'\n  | 'invalid_asset_prefix'\n  | 'invalid_main_path'\n  | 'does_not_match_schema'\n  | 'unable_to_read_file'\n  | 'unsupported_validation_env'\n  | 'unsupported_version'\n  | 'invalid_path'\n  | 'invalid_permissions'\n  | 'invalid_syntax'\n  | 'missing_microfrontend_config_path'\n  | 'unsupported_operation';\n\n// A mapping of error types to their subtypes.\ninterface TypeToSubtype {\n  application:\n    | 'invalid_asset_prefix'\n    | 'invalid_path'\n    | 'multiple_package_managers'\n    | 'not_found';\n  config:\n    | 'conflicting_paths'\n    | 'depcrecated_field'\n    | 'does_not_match_schema'\n    | 'invalid_main_path'\n    | 'invalid_preview_deployment_suffix'\n    | 'multiple_default_applications'\n    | 'no_default_application'\n    | 'not_found_in_env'\n    | 'not_found'\n    | 'inference_failed'\n    | 'unable_to_read_file'\n    | 'invalid_syntax'\n    | 'invalid_permissions'\n    | 'unsupported_operation'\n    | 'unsupported_validation_env'\n    | 'unsupported_version';\n  packageJson:\n    | 'missing_field_name'\n    | 'unable_to_read_file'\n    | 'invalid_permissions'\n    | 'invalid_syntax';\n  vercelJson:\n    | 'missing_field_microfrontend_config_path'\n    | 'unable_to_read_file'\n    | 'invalid_permissions'\n    | 'invalid_syntax';\n  unknown: never;\n}\n\nexport type MicrofrontendErrorSource =\n  | '@vercel/microfrontends'\n  | '@vercel/microfrontends/next'\n  | 'fs'\n  | 'ajv';\n\nexport interface MicrofrontendErrorOptions<T extends MicrofrontendErrorType> {\n  cause?: unknown;\n  source?: MicrofrontendErrorSource;\n  type?: T;\n  subtype?: TypeToSubtype[T];\n}\n\ninterface HandleOptions {\n  fileName?: string;\n}\n\nexport class MicrofrontendError<\n  T extends MicrofrontendErrorType = 'unknown',\n> extends Error {\n  public source: MicrofrontendErrorSource;\n  public type: T;\n  public subtype?: TypeToSubtype[T];\n\n  constructor(message: string, opts?: MicrofrontendErrorOptions<T>) {\n    super(message, { cause: opts?.cause });\n    this.name = 'MicrofrontendsError';\n    this.source = opts?.source ?? '@vercel/microfrontends';\n    this.type = opts?.type ?? ('unknown' as T);\n    this.subtype = opts?.subtype;\n    Error.captureStackTrace(this, MicrofrontendError);\n  }\n\n  isKnown(): boolean {\n    return this.type !== 'unknown';\n  }\n\n  isUnknown(): boolean {\n    return !this.isKnown();\n  }\n\n  /**\n   * Converts an error to a MicrofrontendsError.\n   * @param original - The original error to convert.\n   * @returns The converted MicrofrontendsError.\n   */\n  static convert(\n    original: Error,\n    opts?: HandleOptions,\n  ): MicrofrontendError<MicrofrontendErrorType> {\n    if (opts?.fileName) {\n      const err = MicrofrontendError.convertFSError(original, opts.fileName);\n      if (err) {\n        return err;\n      }\n    }\n\n    if (\n      original.message.includes(\n        'Code generation from strings disallowed for this context',\n      )\n    ) {\n      return new MicrofrontendError(original.message, {\n        type: 'config',\n        subtype: 'unsupported_validation_env',\n        source: 'ajv',\n      });\n    }\n\n    // unknown catch-all\n    return new MicrofrontendError(original.message);\n  }\n\n  static convertFSError(\n    original: Error,\n    fileName: string,\n  ): MicrofrontendError<MicrofrontendErrorType> | null {\n    if (original instanceof Error && 'code' in original) {\n      if (original.code === 'ENOENT') {\n        return new MicrofrontendError(`Could not find \"${fileName}\"`, {\n          type: 'config',\n          subtype: 'unable_to_read_file',\n          source: 'fs',\n        });\n      }\n      if (original.code === 'EACCES') {\n        return new MicrofrontendError(\n          `Permission denied while accessing \"${fileName}\"`,\n          {\n            type: 'config',\n            subtype: 'invalid_permissions',\n            source: 'fs',\n          },\n        );\n      }\n    }\n\n    if (original instanceof SyntaxError) {\n      return new MicrofrontendError(\n        `Failed to parse \"${fileName}\": Invalid JSON format.`,\n        {\n          type: 'config',\n          subtype: 'invalid_syntax',\n          source: 'fs',\n        },\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles an unknown error and returns a MicrofrontendsError instance.\n   * @param err - The error to handle.\n   * @returns A MicrofrontendsError instance.\n   */\n  static handle(\n    err: unknown,\n    opts?: HandleOptions,\n  ): MicrofrontendError<MicrofrontendErrorType> {\n    if (err instanceof MicrofrontendError) {\n      return err as MicrofrontendError<MicrofrontendErrorType>;\n    }\n\n    // handle Error instances\n    if (err instanceof Error) {\n      return MicrofrontendError.convert(err, opts);\n    }\n\n    // handle object errors\n    if (typeof err === 'object' && err !== null) {\n      if ('message' in err && typeof err.message === 'string') {\n        return MicrofrontendError.convert(new Error(err.message), opts);\n      }\n    }\n\n    return new MicrofrontendError('An unknown error occurred');\n  }\n}\n","import { MicrofrontendError } from '../../errors';\n\n/**\n * Utility to fetch the microfrontend configuration string from the environment.\n */\nexport function getConfigStringFromEnv(): string {\n  const config = process.env.MFE_CONFIG;\n  if (!config) {\n    throw new MicrofrontendError(`Missing \"MFE_CONFIG\" in environment.`, {\n      type: 'config',\n      subtype: 'not_found_in_env',\n    });\n  }\n  return config;\n}\n","import { parse } from 'jsonc-parser';\nimport { getConfigStringFromEnv } from '../utils/get-config-from-env';\nimport { isMainConfig } from '../../schema/utils/is-main-config';\nimport { isDefaultApp } from '../../schema/utils/is-default-app';\nimport type { Config } from '../../schema/types';\nimport type { ClientConfig } from '../client/types';\nimport { MicrofrontendError } from '../../errors';\nimport { MicrofrontendConfigClient } from '../client';\nimport { type OverridesConfig, parseOverrides } from '../../overrides';\nimport { DefaultApplication, ChildApplication } from './application';\nimport { DEFAULT_LOCAL_PROXY_PORT } from './constants';\nimport {\n  validateConfigDefaultApplication,\n  validateConfigPaths,\n  validateDeprecatedFields,\n} from './validation';\n\nexport interface ConfigMeta {\n  /**\n   * The application name that the configuration is being loaded from.\n   */\n  fromApp: string;\n}\n\ninterface ValidationOptions {\n  skipValidation?: 'deprecatedFields'[];\n}\n\n/**\n * A class to manage the microfrontends configuration.\n */\nexport class MicrofrontendConfigIsomorphic {\n  config: Config;\n  isMainConfig: boolean;\n  partOf?: string;\n  defaultApplication?: DefaultApplication;\n  childApplications: Record<string, ChildApplication> = {};\n  overrides?: OverridesConfig;\n  options?: Config['options'];\n\n  private readonly serialized: {\n    config: Config;\n    overrides?: OverridesConfig;\n    meta: ConfigMeta;\n  };\n\n  constructor({\n    config,\n    overrides,\n    meta,\n    opts,\n  }: {\n    config: Config;\n    overrides?: OverridesConfig;\n    meta: ConfigMeta;\n    opts?: ValidationOptions;\n  }) {\n    // run validation on init\n    MicrofrontendConfigIsomorphic.validate(config, opts);\n\n    const disableOverrides =\n      config.options?.disableOverrides ??\n      config.options?.vercel?.disableOverrides ??\n      false;\n    this.overrides = overrides && !disableOverrides ? overrides : undefined;\n    this.isMainConfig = isMainConfig(config);\n\n    if (isMainConfig(config)) {\n      // create applications\n      for (const [appId, appConfig] of Object.entries(config.applications)) {\n        const appOverrides = !disableOverrides\n          ? this.overrides?.applications[appId]\n          : undefined;\n\n        if (isDefaultApp(appConfig)) {\n          this.defaultApplication = new DefaultApplication(appId, {\n            app: appConfig,\n            overrides: appOverrides,\n          });\n        } else {\n          this.childApplications[appId] = new ChildApplication(appId, {\n            app: appConfig,\n            overrides: appOverrides,\n          });\n        }\n      }\n    } else {\n      this.partOf = config.partOf;\n      const appOverrides = !disableOverrides\n        ? this.overrides?.applications[meta.fromApp]\n        : undefined;\n      this.childApplications[meta.fromApp] = new ChildApplication(\n        meta.fromApp,\n        {\n          // we don't know routing because we're not in the main config\n          app: { routing: [] },\n          overrides: appOverrides,\n        },\n      );\n    }\n\n    // the main configuration file should ALWAYS have the default\n    if (isMainConfig(config) && !this.defaultApplication) {\n      throw new MicrofrontendError(\n        'Could not find default application in microfrontends configuration',\n        {\n          type: 'application',\n          subtype: 'not_found',\n        },\n      );\n    }\n\n    this.config = config;\n    this.options = config.options;\n    this.serialized = {\n      config,\n      overrides,\n      meta,\n    };\n  }\n\n  static validate(config: string | Config, opts?: ValidationOptions): Config {\n    const skipValidation: ValidationOptions['skipValidation'] =\n      opts?.skipValidation ?? [];\n    // let this throw if it's not valid JSON\n    const c = typeof config === 'string' ? (parse(config) as Config) : config;\n\n    if (isMainConfig(c)) {\n      validateConfigPaths(c.applications);\n      validateConfigDefaultApplication(c.applications);\n\n      if (!skipValidation.includes('deprecatedFields')) {\n        validateDeprecatedFields(c);\n      }\n    }\n\n    return c;\n  }\n\n  static fromEnv({\n    meta,\n    cookies,\n  }: {\n    meta: ConfigMeta;\n    cookies?: { name: string; value: string }[];\n  }): MicrofrontendConfigIsomorphic {\n    return new MicrofrontendConfigIsomorphic({\n      config: parse(getConfigStringFromEnv()) as Config,\n      overrides: parseOverrides(cookies ?? []),\n      meta,\n    });\n  }\n\n  isOverridesDisabled(): boolean {\n    return this.options?.vercel?.disableOverrides ?? false;\n  }\n\n  getConfig(): Config {\n    return this.config;\n  }\n\n  getApplicationsByType(): {\n    defaultApplication?: DefaultApplication;\n    applications: ChildApplication[];\n  } {\n    return {\n      defaultApplication: this.defaultApplication,\n      applications: Object.values(this.childApplications),\n    };\n  }\n\n  getChildApplications(): ChildApplication[] {\n    return Object.values(this.childApplications);\n  }\n\n  getAllApplications(): (DefaultApplication | ChildApplication)[] {\n    return [\n      this.defaultApplication,\n      ...Object.values(this.childApplications),\n    ].filter(Boolean) as (DefaultApplication | ChildApplication)[];\n  }\n\n  getApplication(name: string): DefaultApplication | ChildApplication {\n    // check the default\n    if (this.defaultApplication?.name === name) {\n      return this.defaultApplication;\n    }\n    const app = this.childApplications[name];\n    if (!app) {\n      throw new MicrofrontendError(\n        `Could not find microfrontends configuration for application \"${name}\"`,\n        {\n          type: 'application',\n          subtype: 'not_found',\n        },\n      );\n    }\n\n    return app;\n  }\n\n  getApplicationByProjectId(\n    projectId: string,\n  ): DefaultApplication | ChildApplication | undefined {\n    // check the default\n    if (this.defaultApplication?.projectId === projectId) {\n      return this.defaultApplication;\n    }\n\n    return Object.values(this.childApplications).find(\n      (app) => app.projectId === projectId,\n    );\n  }\n\n  /**\n   * Returns the default application. This can throw if the default application\n   * is undefined ( )\n   */\n  getDefaultApplication(): DefaultApplication {\n    if (!this.defaultApplication) {\n      throw new MicrofrontendError(\n        'Could not find default application in microfrontends configuration',\n        {\n          type: 'application',\n          subtype: 'not_found',\n        },\n      );\n    }\n\n    return this.defaultApplication;\n  }\n\n  /**\n   * Returns the configured port for the local proxy\n   */\n  getLocalProxyPort(): number {\n    return (\n      this.config.options?.localProxyPort ??\n      this.config.options?.localProxy?.port ??\n      DEFAULT_LOCAL_PROXY_PORT\n    );\n  }\n\n  /**\n   * Serializes the class back to the Schema type.\n   *\n   * NOTE: This is used when writing the config to disk and must always match the input Schema\n   */\n  toSchemaJson(): Config {\n    return this.serialized.config;\n  }\n\n  toClientConfig(): MicrofrontendConfigClient {\n    const applications: ClientConfig['applications'] = Object.fromEntries(\n      Object.entries(this.childApplications).map(([name, application]) => [\n        name,\n        {\n          default: false,\n          routing: application.routing,\n        },\n      ]),\n    );\n\n    // add the default application\n    if (this.defaultApplication) {\n      applications[this.defaultApplication.name] = {\n        default: true,\n      };\n    }\n\n    return new MicrofrontendConfigClient({\n      applications,\n    });\n  }\n\n  serialize(): {\n    config: Config;\n    overrides?: OverridesConfig;\n    meta: ConfigMeta;\n  } {\n    return this.serialized;\n  }\n}\n","import type { Config, MainConfig } from '../types';\n\nexport function isMainConfig(c: Config): c is MainConfig {\n  return !('partOf' in c);\n}\n","import type { Application, DefaultApplication } from '../types';\n\nexport function isDefaultApp(a: Application): a is DefaultApplication {\n  return !('routing' in a);\n}\n","import { pathToRegexp } from 'path-to-regexp';\nimport type { ClientConfig } from './types';\n\ninterface MicrofrontendConfigClientOptions {\n  removeFlaggedPaths?: boolean;\n}\n\nexport class MicrofrontendConfigClient {\n  applications: ClientConfig['applications'];\n  pathCache: Record<string, string> = {};\n  private readonly serialized: ClientConfig;\n\n  constructor(config: ClientConfig, opts?: MicrofrontendConfigClientOptions) {\n    this.serialized = config;\n    if (opts?.removeFlaggedPaths) {\n      for (const app of Object.values(config.applications)) {\n        if (app.routing) {\n          app.routing = app.routing.filter((match) => !match.flag);\n        }\n      }\n    }\n    this.applications = config.applications;\n  }\n\n  /**\n   * Create a new `MicrofrontendConfigClient` from a JSON string.\n   * Config must be passed in to remain framework agnostic\n   */\n  static fromEnv(\n    config: string | undefined,\n    opts?: MicrofrontendConfigClientOptions,\n  ): MicrofrontendConfigClient {\n    if (!config) {\n      throw new Error('No microfrontends configuration found');\n    }\n    return new MicrofrontendConfigClient(\n      JSON.parse(config) as ClientConfig,\n      opts,\n    );\n  }\n\n  isEqual(other: MicrofrontendConfigClient): boolean {\n    return (\n      JSON.stringify(this.applications) === JSON.stringify(other.applications)\n    );\n  }\n\n  getApplicationNameForPath(path: string): string | null {\n    if (!path.startsWith('/')) {\n      throw new Error(`Path must start with a /`);\n    }\n\n    if (this.pathCache[path]) {\n      return this.pathCache[path];\n    }\n\n    const pathname = new URL(path, 'https://example.com').pathname;\n    for (const [name, application] of Object.entries(this.applications)) {\n      if (application.routing) {\n        for (const group of application.routing) {\n          for (const childPath of group.paths) {\n            const regexp = pathToRegexp(childPath);\n            if (regexp.test(pathname)) {\n              this.pathCache[path] = name;\n              return name;\n            }\n          }\n        }\n      }\n    }\n    const defaultApplication = Object.entries(this.applications).find(\n      ([, application]) => application.default,\n    );\n    if (!defaultApplication) {\n      return null;\n    }\n\n    this.pathCache[path] = defaultApplication[0];\n    return defaultApplication[0];\n  }\n\n  serialize(): ClientConfig {\n    return this.serialized;\n  }\n}\n","import { pathToRegexp, parse as parsePathRegexp } from 'path-to-regexp';\nimport type {\n  ApplicationId,\n  PathGroup,\n  ApplicationRouting,\n  ChildApplication as ChildApplicationConfig,\n  MainConfig,\n} from '../../schema/types';\nimport { MicrofrontendError } from '../../errors';\nimport { isDefaultApp } from '../../schema/utils/is-default-app';\n\n/**\n * Validate all paths in a configuration - ensures paths do not overlap\n */\nexport const validateConfigPaths = (\n  applicationConfigsById?: ApplicationRouting,\n): void => {\n  if (!applicationConfigsById) {\n    return;\n  }\n\n  const pathsByApplicationId = new Map<\n    PathGroup['paths'][number],\n    {\n      applications: ApplicationId[];\n      matcher: RegExp;\n      applicationId?: ApplicationId;\n    }\n  >();\n  const errors: string[] = [];\n\n  for (const [id, app] of Object.entries(applicationConfigsById)) {\n    if (isDefaultApp(app)) {\n      // default applications do not have routing\n      continue;\n    }\n    // TODO: remove this once DefaultApplication.development is required (after the migration)\n    const childApp = app as ChildApplicationConfig;\n\n    for (const pathMatch of childApp.routing) {\n      for (const path of pathMatch.paths) {\n        const maybeError = validatePathExpression(path);\n        if (maybeError) {\n          errors.push(maybeError);\n        } else {\n          const existing = pathsByApplicationId.get(path);\n          if (existing) {\n            existing.applications.push(id);\n          } else {\n            pathsByApplicationId.set(path, {\n              applications: [id],\n              matcher: pathToRegexp(path),\n              applicationId: id,\n            });\n          }\n        }\n      }\n    }\n  }\n  const entries = Array.from(pathsByApplicationId.entries());\n\n  for (const [path, { applications: ids, matcher, applicationId }] of entries) {\n    if (ids.length > 1) {\n      errors.push(\n        `Duplicate path \"${path}\" for applications \"${ids.join(', ')}\"`,\n      );\n    }\n\n    for (const [\n      matchPath,\n      { applications: matchIds, applicationId: matchApplicationId },\n    ] of entries) {\n      if (path === matchPath) {\n        // we're comparing to ourselves, so skip\n        continue;\n      }\n\n      if (applicationId === matchApplicationId) {\n        // we're comparing to paths within our own application, which are allowed to overlap, so skip\n        continue;\n      }\n\n      if (matcher.test(matchPath)) {\n        const source = `\"${path}\" of application${ids.length > 0 ? 's' : ''} ${ids.join(', ')}`;\n        const destination = `\"${matchPath}\" of application${matchIds.length > 0 ? 's' : ''} ${matchIds.join(', ')}`;\n\n        errors.push(\n          `Overlapping path detected between ${source} and ${destination}`,\n        );\n      }\n    }\n  }\n\n  if (errors.length) {\n    throw new MicrofrontendError(`Invalid paths: ${errors.join(', ')}`, {\n      type: 'config',\n      subtype: 'conflicting_paths',\n    });\n  }\n};\n\n// From https://github.com/pillarjs/path-to-regexp/blob/b0778f5e8e6c6e9ee4e2f5b34e877cc5229f8036/src/index.ts#L143\nconst PATH_DEFAULT_PATTERN = '[^\\\\/#\\\\?]+?';\n\nfunction validatePathExpression(path: string): string | undefined {\n  try {\n    const tokens = parsePathRegexp(path);\n    if (/(?<!\\\\)\\{/.test(path)) {\n      return `Optional paths are not supported: ${path}`;\n    }\n    if (/(?<!\\\\|\\()\\?/.test(path)) {\n      return `Optional paths are not supported: ${path}`;\n    }\n    if (/\\/[^/]*(?<!\\\\):[^/]*(?<!\\\\):[^/]*/.test(path)) {\n      return `Only one wildcard is allowed per path segment: ${path}`;\n    }\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (token === undefined) {\n        return `token ${i} in ${path} is undefined, this shouldn't happen`;\n      }\n      if (typeof token !== 'string') {\n        if (!token.name) {\n          return `Only named wildcards are allowed: ${path} (hint: add \":path\" to the wildcard)`;\n        }\n        if (\n          token.pattern !== PATH_DEFAULT_PATTERN &&\n          // Allows (a|b|c) and ((?!a|b|c).*) regex\n          // Only limited regex is supported for now, due to performance considerations\n          !/^(?<allowed>[\\w]+(?:\\|[^|()]+)+)$|^\\(\\?!(?<disallowed>[\\w]+(?:\\|[^|()]+)+)\\)\\.\\*$/.test(\n            token.pattern,\n          )\n        ) {\n          return `Path ${path} cannot use unsupported regular expression wildcard`;\n        }\n        if (token.modifier && i !== tokens.length - 1) {\n          return `Modifier ${token.modifier} is not allowed on wildcard :${token.name} in ${path}. Modifiers are only allowed in the last path component`;\n        }\n      }\n    }\n  } catch (e) {\n    const message = e instanceof Error ? e.message : String(e);\n    return `Path ${path} could not be parsed into regexp: ${message}`;\n  }\n  return undefined;\n}\n\n/**\n * Validate all paths in an application - ensures paths are the correct format\n */\nexport const validateAppPaths = (\n  name: string,\n  app: ChildApplicationConfig,\n): void => {\n  // validate routes\n  for (const group of app.routing) {\n    for (const p of group.paths) {\n      if (p === '/') {\n        continue;\n      }\n      if (p.endsWith('/')) {\n        throw new MicrofrontendError(\n          `Invalid path for application \"${name}\". ${p} must not end with a slash.`,\n          { type: 'application', subtype: 'invalid_path' },\n        );\n      }\n\n      if (!p.startsWith('/')) {\n        throw new MicrofrontendError(\n          `Invalid path for application \"${name}\". ${p} must start with a slash.`,\n          { type: 'application', subtype: 'invalid_path' },\n        );\n      }\n    }\n  }\n};\n\n/**\n * Make sure only one `Application` defines routing\n * */\nexport const validateConfigDefaultApplication = (\n  applicationConfigsById?: ApplicationRouting,\n): void => {\n  if (!applicationConfigsById) {\n    return;\n  }\n\n  // find all applications that have routing\n  const applicationsWithRouting = Object.entries(applicationConfigsById).filter(\n    ([, app]) => !isDefaultApp(app),\n  );\n  // get all the application names\n  const applicationsWithRoutingNames = applicationsWithRouting.map(\n    ([key]) => key,\n  );\n  const numApplications = Object.keys(applicationConfigsById).length;\n  const numApplicationsWithRouting = applicationsWithRoutingNames.length;\n  const numApplicationsWithoutRouting =\n    numApplications - numApplicationsWithRouting;\n\n  if (numApplicationsWithoutRouting === 0) {\n    throw new MicrofrontendError(\n      'No default application found. At least one application needs to be the default by omitting routing.',\n      { type: 'config', subtype: 'no_default_application' },\n    );\n  }\n\n  if (numApplicationsWithoutRouting > 1) {\n    throw new MicrofrontendError(\n      `Only one application can omit \"routing\". Found ${applicationsWithRoutingNames.length - Object.keys(applicationConfigsById).length > 1}.`,\n      { type: 'config', subtype: 'multiple_default_applications' },\n    );\n  }\n};\n\n// TODO: Remove this after 22 March 2025 when the new schema has been fully in use for 30 days and thus we can delete the deprecated fields.\nexport const validateDeprecatedFields = (config: MainConfig): void => {\n  const errors = [];\n\n  if (config.options?.vercel) {\n    errors.push(\n      `Configuration cannot contain deprecated field 'options.vercel'. Use 'options.disableOverrides' instead.`,\n    );\n  }\n  if (config.options?.localProxy) {\n    errors.push(\n      `Configuration cannot contain deprecated field 'options.localProxy'. Use 'options.localProxyPort' instead.`,\n    );\n  }\n\n  for (const [applicationId, application] of Object.entries(\n    config.applications,\n  )) {\n    if (application.vercel) {\n      errors.push(\n        `Application '${applicationId}' cannot contain deprecated field 'vercel'. Use 'projectId' instead.`,\n      );\n    }\n    if (application.production) {\n      errors.push(\n        `Application '${applicationId}' cannot contain deprecated field 'production'. Use 'development.fallback' instead.`,\n      );\n    }\n    if (application.development?.local) {\n      errors.push(\n        `Application '${applicationId}' cannot contain deprecated field 'development.local'. Use 'developement.localPort' instead.`,\n      );\n    }\n  }\n\n  if (errors.length) {\n    throw new MicrofrontendError(\n      `Microfrontends configuration file errors:\\n- ${errors.join('\\n- ')}`,\n      {\n        type: 'config',\n        subtype: 'depcrecated_field',\n      },\n    );\n  }\n};\n","const PREFIX = 'vc-ap';\n\nexport function generateAssetPrefixFromName({\n  name,\n}: {\n  name: string;\n}): string {\n  if (!name) {\n    throw new Error('Name is required to generate an asset prefix');\n  }\n\n  return `${PREFIX}-${name}`;\n}\n","export function generatePortFromName({\n  name,\n  minPort = 3000,\n  maxPort = 8000,\n}: {\n  name: string;\n  minPort?: number;\n  maxPort?: number;\n}): number {\n  if (!name) {\n    throw new Error('Name is required to generate a port');\n  }\n\n  // hash the name\n  let hash = 0;\n  for (let i = 0; i < name.length; i++) {\n    // eslint-disable-next-line no-bitwise\n    hash = (hash << 5) - hash + name.charCodeAt(i);\n    // Convert to 32-bit\n    // eslint-disable-next-line no-bitwise\n    hash |= 0;\n  }\n  hash = Math.abs(hash);\n\n  // Map the hash to the port range\n  const range = maxPort - minPort;\n  const port = minPort + (hash % range);\n\n  return port;\n}\n","import type {\n  HostConfig as RemoteHostConfigSchema,\n  LocalHostConfig as LocalHostConfigSchema,\n} from '../../schema/types';\nimport { generatePortFromName } from './utils/generate-port';\n\ninterface HostOptions {\n  isLocal?: boolean;\n}\n\nexport class Host {\n  protocol: 'http' | 'https';\n  host: string;\n  port?: number;\n  local: boolean | undefined;\n\n  constructor(\n    hostConfig: RemoteHostConfigSchema | string,\n    options?: HostOptions,\n  ) {\n    if (typeof hostConfig === 'string') {\n      ({\n        protocol: this.protocol,\n        host: this.host,\n        port: this.port,\n      } = Host.parseUrl(hostConfig));\n    } else {\n      const { protocol = 'https', host, port } = hostConfig;\n      this.protocol = protocol;\n      this.host = host;\n      this.port = port;\n    }\n    this.local = options?.isLocal;\n  }\n\n  private static parseUrl(url: string): {\n    protocol: Host['protocol'];\n    host: string;\n    port?: number;\n  } {\n    let hostToParse = url;\n    if (!/^https?:\\/\\//.exec(hostToParse)) {\n      hostToParse = `https://${hostToParse}`;\n    }\n    const parsed = new URL(hostToParse);\n    if (!parsed.hostname) {\n      throw new Error(Host.getMicrofrontendsError(url, 'requires a host'));\n    }\n    if (parsed.hash) {\n      throw new Error(\n        Host.getMicrofrontendsError(url, 'cannot have a fragment'),\n      );\n    }\n    if (parsed.username || parsed.password) {\n      throw new Error(\n        Host.getMicrofrontendsError(\n          url,\n          'cannot have authentication credentials (username and/or password)',\n        ),\n      );\n    }\n    if (parsed.pathname !== '/') {\n      throw new Error(Host.getMicrofrontendsError(url, 'cannot have a path'));\n    }\n    if (parsed.search) {\n      throw new Error(\n        Host.getMicrofrontendsError(url, 'cannot have query parameters'),\n      );\n    }\n    const protocol = parsed.protocol.slice(0, -1) as Host['protocol'];\n    return {\n      protocol,\n      host: parsed.hostname,\n      port: parsed.port ? Number.parseInt(parsed.port) : undefined,\n    };\n  }\n\n  private static getMicrofrontendsError(url: string, message: string): string {\n    return `Microfrontends configuration error: the URL ${url} in your microfrontends.json ${message}.`;\n  }\n\n  isLocal(): boolean {\n    return this.local || this.host === 'localhost' || this.host === '127.0.0.1';\n  }\n\n  toString(): string {\n    const url = this.toUrl();\n    // strip the trailing slash\n    return url.toString().replace(/\\/$/, '');\n  }\n\n  toUrl(): URL {\n    const url = `${this.protocol}://${this.host}${this.port ? `:${this.port}` : ''}`;\n    return new URL(url);\n  }\n}\n\n/**\n * A Host subclass with defaults for locally running applications\n */\nexport class LocalHost extends Host {\n  constructor({\n    appName,\n    localPort,\n    ...hostConfig\n  }: LocalHostConfigSchema & { appName: string; localPort?: number }) {\n    // set defaults for local\n    const host = hostConfig.host ?? 'localhost';\n    const port =\n      localPort ?? hostConfig.port ?? generatePortFromName({ name: appName });\n    const protocol = hostConfig.protocol ?? 'http';\n\n    super({ protocol, host, port });\n  }\n}\n","import type {\n  Application as ApplicationConfig,\n  DefaultApplication as DefaultApplicationConfig,\n  ChildApplication as ChildApplicationConfig,\n  PathGroup,\n} from '../../schema/types';\nimport type { ApplicationOverrideConfig } from '../../overrides';\nimport { validateAppPaths } from './validation';\nimport { generateAssetPrefixFromName } from './utils/generate-asset-prefix';\nimport { Host, LocalHost } from './host';\n\nexport class Application {\n  readonly default: boolean;\n  name: string;\n  development: {\n    local: LocalHost;\n    fallback?: Host;\n  };\n  fallback?: Host;\n  projectId?: string;\n  overrides?: {\n    environment?: Host;\n  };\n  readonly serialized: ApplicationConfig;\n\n  constructor(\n    name: string,\n    {\n      app,\n      overrides,\n      isDefault,\n    }: {\n      app: ApplicationConfig;\n      overrides?: ApplicationOverrideConfig;\n      isDefault?: boolean;\n    },\n  ) {\n    this.name = name;\n    this.development = {\n      local: new LocalHost({\n        appName: name,\n        localPort: app.development?.localPort,\n        ...app.development?.local,\n      }),\n      fallback: app.development?.fallback\n        ? new Host(app.development.fallback)\n        : undefined,\n    };\n    if (app.development?.fallback) {\n      this.fallback = new Host(app.development.fallback);\n    } else if (app.production) {\n      this.fallback = new Host(app.production);\n    }\n    this.projectId = app.projectId ?? app.vercel?.projectId;\n    this.overrides = overrides?.environment\n      ? {\n          environment: new Host(overrides.environment),\n        }\n      : undefined;\n    this.default = isDefault ?? false;\n    this.serialized = app;\n  }\n\n  isDefault(): boolean {\n    return this.default;\n  }\n\n  getAssetPrefix(): string {\n    return generateAssetPrefixFromName({ name: this.name });\n  }\n\n  serialize(): ApplicationConfig {\n    return this.serialized;\n  }\n}\n\nexport class DefaultApplication extends Application {\n  readonly default = true;\n  // TODO: remove this once the config simplification migration is complete.\n  /** @deprecated use fallback instead. */\n  production?: Host;\n  fallback: Host;\n\n  constructor(\n    name: string,\n    {\n      app,\n      overrides,\n    }: {\n      app: DefaultApplicationConfig;\n      overrides?: ApplicationOverrideConfig;\n    },\n  ) {\n    super(name, {\n      app,\n      overrides,\n      isDefault: true,\n    });\n\n    const fallbackHost = app.development?.fallback ?? app.production;\n    if (fallbackHost === undefined) {\n      // TODO: remove this one app.developement.fallback is required after the migration.\n      throw new Error(\n        '`app.production` or `app.development.fallback` must be set in the default application in microfrontends.json.',\n      );\n    }\n    this.fallback = new Host(fallbackHost);\n    if (app.production) {\n      this.production = new Host(app.production);\n    }\n  }\n\n  getAssetPrefix(): string {\n    return '';\n  }\n}\n\nexport class ChildApplication extends Application {\n  readonly default = false;\n  routing: PathGroup[];\n\n  constructor(\n    name: string,\n    {\n      app,\n      overrides,\n    }: {\n      app: ChildApplicationConfig;\n      overrides?: ApplicationOverrideConfig;\n    },\n  ) {\n    // validate\n    ChildApplication.validate(name, app);\n\n    super(name, {\n      app,\n      overrides,\n      isDefault: false,\n    });\n\n    this.routing = app.routing;\n  }\n\n  static validate(name: string, app: ChildApplicationConfig): void {\n    // validate routes\n    validateAppPaths(name, app);\n  }\n}\n","export const DEFAULT_LOCAL_PROXY_PORT = 3024;\n","import type { ChildConfig } from '../../schema/types';\nimport type { OverridesConfig } from '../../overrides';\nimport { type ConfigMeta, MicrofrontendConfigIsomorphic } from '.';\n\nexport class MicrofrontendChildConfig extends MicrofrontendConfigIsomorphic {\n  isMainConfig = false;\n  partOf?: string;\n\n  constructor({\n    config,\n    overrides,\n    meta,\n  }: {\n    config: ChildConfig;\n    overrides?: OverridesConfig;\n    meta: ConfigMeta;\n  }) {\n    super({ config, overrides, meta });\n    this.partOf = config.partOf;\n  }\n}\n","import { isDefaultApp } from '../../schema/utils/is-default-app';\nimport type { MainConfig } from '../../schema/types';\nimport { MicrofrontendError } from '../../errors';\nimport type { OverridesConfig } from '../../overrides';\nimport { DefaultApplication, ChildApplication } from './application';\nimport { type ConfigMeta, MicrofrontendConfigIsomorphic } from '.';\n\nexport class MicrofrontendMainConfig extends MicrofrontendConfigIsomorphic {\n  isMainConfig = true;\n  defaultApplication: DefaultApplication;\n\n  constructor({\n    config,\n    overrides,\n    meta,\n  }: {\n    config: MainConfig;\n    overrides?: OverridesConfig;\n    meta: ConfigMeta;\n  }) {\n    super({ config, overrides, meta });\n    const disableOverrides =\n      config.options?.disableOverrides ??\n      config.options?.vercel?.disableOverrides ??\n      false;\n\n    let defaultApplication: DefaultApplication | undefined;\n    for (const [appId, appConfig] of Object.entries(config.applications)) {\n      const appOverrides = !disableOverrides\n        ? this.overrides?.applications[appId]\n        : undefined;\n\n      if (isDefaultApp(appConfig)) {\n        defaultApplication = new DefaultApplication(appId, {\n          app: appConfig,\n          overrides: appOverrides,\n        });\n      } else {\n        this.childApplications[appId] = new ChildApplication(appId, {\n          app: appConfig,\n          overrides: appOverrides,\n        });\n      }\n    }\n\n    // validate that this.defaultApplication is defined\n    if (!defaultApplication) {\n      throw new MicrofrontendError(\n        'Could not find default application in microfrontends configuration',\n        {\n          type: 'application',\n          subtype: 'not_found',\n        },\n      );\n    }\n    this.defaultApplication = defaultApplication;\n  }\n}\n","import {\n  type ConfigMeta,\n  MicrofrontendConfigIsomorphic,\n} from '../../microfrontends-config/isomorphic';\nimport { MicrofrontendChildConfig } from '../../microfrontends-config/isomorphic/child';\nimport { MicrofrontendMainConfig } from '../../microfrontends-config/isomorphic/main';\nimport type { MicrofrontendsConfig } from '../types';\nimport type { Config } from '../../schema/types';\nimport type { OverridesConfig } from '../../overrides';\nimport { isMainConfig } from '../../schema/utils/is-main-config';\n\nexport class Microfrontends {\n  config: MicrofrontendsConfig;\n\n  constructor({\n    config,\n    overrides,\n    meta,\n  }: {\n    config: Config;\n    overrides?: OverridesConfig;\n    meta: ConfigMeta;\n  }) {\n    if (isMainConfig(config)) {\n      this.config = new MicrofrontendMainConfig({ config, overrides, meta });\n    } else {\n      this.config = new MicrofrontendChildConfig({ config, overrides, meta });\n    }\n  }\n\n  isChildConfig(): boolean {\n    return this.config instanceof MicrofrontendChildConfig;\n  }\n\n  static fromEnv({\n    cookies,\n    meta,\n  }: {\n    cookies?: { name: string; value: string }[];\n    meta: ConfigMeta;\n  }): Microfrontends {\n    const config = MicrofrontendConfigIsomorphic.fromEnv({\n      cookies,\n      meta,\n    });\n    return new Microfrontends(config.serialize());\n  }\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nconst GIT_DIRECTORY = '.git';\n\n/**\n * Find the root of the repository by looking for a `.git` directory. This should\n * work with submodules as well as it verifies that the `.git` directory is a\n * directory and not a file.\n *\n * TODO: support finding the root via other mechanisms to avoid the need for git to already be initialized\n */\nexport function findRepositoryRoot(startDir?: string): string {\n  if (process.env.NX_WORKSPACE_ROOT) {\n    // Trust NX's workspace root here so we don't have to rely on finding a .git\n    // directory. There are some places (like the `vercel deploy` CLI command)\n    // where the .git directory doesn't exist.\n    // TODO: Figure out a way to find the repo root in non-NX `vercel deploy`s.\n    return process.env.NX_WORKSPACE_ROOT;\n  }\n\n  let currentDir = startDir || process.cwd();\n\n  while (currentDir !== path.parse(currentDir).root) {\n    const gitPath = path.join(currentDir, GIT_DIRECTORY);\n\n    // Check for a .git directory (not a file)\n    if (fs.existsSync(gitPath) && fs.statSync(gitPath).isDirectory()) {\n      return currentDir;\n    }\n\n    currentDir = path.dirname(currentDir);\n  }\n\n  throw new Error(\n    'Repository root not found. Specify the root of the repository with the `repository.root` option.',\n  );\n}\n","import { dirname } from 'node:path';\nimport { readFileSync } from 'node:fs';\nimport fg from 'fast-glob';\n\n// cache the path to default configuration to avoid having to walk the file system multiple times\nconst configCache: Record<string, string> = {};\n\ninterface FindPackagePathOptions {\n  repositoryRoot: string;\n  name: string;\n}\n\n/**\n * Given a repository root and a package name, find the path to the package.json file with the\n * given name.\n *\n * This method uses globby to find all package.json files and then reads them in parallel\n */\nfunction findPackagePathWithGlob({\n  repositoryRoot,\n  name,\n}: FindPackagePathOptions): string | null {\n  try {\n    // eslint-disable-next-line import/no-named-as-default-member\n    const packageJsonPaths = fg.globSync('**/package.json', {\n      cwd: repositoryRoot,\n      absolute: true,\n      onlyFiles: true,\n      followSymbolicLinks: false,\n      ignore: ['**/node_modules/**', '**/.git/**'],\n    });\n\n    const matchingPaths: string[] = [];\n    for (const packageJsonPath of packageJsonPaths) {\n      const packageJsonContent = readFileSync(packageJsonPath, 'utf-8');\n      const packageJson = JSON.parse(packageJsonContent) as {\n        name?: string;\n      };\n\n      if (packageJson.name === name) {\n        matchingPaths.push(packageJsonPath);\n      }\n    }\n\n    if (matchingPaths.length > 1) {\n      throw new Error(\n        `Found multiple packages with the name \"${name}\" in the repository: ${matchingPaths.join(', ')}`,\n      );\n    }\n\n    if (matchingPaths.length === 0) {\n      throw new Error(\n        `Could not find package with the name \"${name}\" in the repository`,\n      );\n    }\n\n    const [packageJsonPath] = matchingPaths as [string];\n    return dirname(packageJsonPath);\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * Given a repository root and a package name, find the path to the package directory with\n * a package.json that contains the given name.\n */\nexport function findPackagePath(opts: FindPackagePathOptions): string {\n  // cache this with name to support multiple configurations in the same repository\n  const cacheKey = `${opts.repositoryRoot}-${opts.name}`;\n\n  // Check if we have a cached result\n  if (configCache[cacheKey]) {\n    return configCache[cacheKey];\n  }\n\n  // Race both methods\n  const result = findPackagePathWithGlob(opts);\n\n  if (!result) {\n    throw new Error(\n      `Could not find package with the name \"${opts.name}\" in the repository`,\n    );\n  }\n\n  // Cache the result\n  configCache[cacheKey] = result;\n  return result;\n}\n","import { dirname } from 'node:path';\nimport { readFileSync } from 'node:fs';\nimport { parse } from 'jsonc-parser';\nimport fg from 'fast-glob';\nimport type { Config } from '../../schema/types';\nimport { CONFIGURATION_FILENAMES } from '../../constants';\nimport { isMainConfig } from '../../schema/utils/is-main-config';\n\n// cache the path to default configuration to avoid having to walk the file system multiple times\nconst configCache: Record<string, string> = {};\n\ninterface FindDefaultMicrofrontendPackageArgs {\n  repositoryRoot: string;\n  applicationName: string;\n}\n\n/**\n * Given a repository root and a package name, find the path to the package.json file with the\n * given name.\n *\n * This method uses globby to find all package.json files and then reads them in parallel\n */\nfunction findDefaultMicrofrontendsPackages({\n  repositoryRoot,\n  applicationName,\n}: FindDefaultMicrofrontendPackageArgs): string | null {\n  try {\n    // eslint-disable-next-line import/no-named-as-default-member\n    const microfrontendsJsonPaths = fg.globSync(\n      `**/{${CONFIGURATION_FILENAMES.join(',')}}`,\n      {\n        cwd: repositoryRoot,\n        absolute: true,\n        onlyFiles: true,\n        followSymbolicLinks: false,\n        ignore: ['**/node_modules/**', '**/.git/**'],\n      },\n    );\n\n    const matchingPaths: string[] = [];\n    for (const microfrontendsJsonPath of microfrontendsJsonPaths) {\n      try {\n        const microfrontendsJsonContent = readFileSync(\n          microfrontendsJsonPath,\n          'utf-8',\n        );\n        const microfrontendsJson = parse(microfrontendsJsonContent) as Config;\n\n        if (\n          isMainConfig(microfrontendsJson) &&\n          microfrontendsJson.applications[applicationName]\n        ) {\n          matchingPaths.push(microfrontendsJsonPath);\n        }\n      } catch (error) {\n        // malformed json most likely, skip this file\n      }\n    }\n\n    if (matchingPaths.length > 1) {\n      throw new Error(\n        `Found multiple default applications referencing \"${applicationName}\" in the repository, this is not yet supported.\\n${matchingPaths.join('\\n  • ')}`,\n      );\n    }\n\n    if (matchingPaths.length === 0) {\n      throw new Error(\n        `Could not find default application with \"applications.${applicationName}\"`,\n      );\n    }\n\n    const [packageJsonPath] = matchingPaths as [string];\n    return dirname(packageJsonPath);\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * Given a repository root and a package name, find the path to the package directory with\n * a microfrontends config that contains the given name in its applications.\n */\nexport function findDefaultMicrofrontendsPackage(\n  opts: FindDefaultMicrofrontendPackageArgs,\n): string {\n  // cache this with name to support multiple configurations in the same repository\n  const cacheKey = `${opts.repositoryRoot}-${opts.applicationName}`;\n\n  // Check if we have a cached result\n  if (configCache[cacheKey]) {\n    return configCache[cacheKey];\n  }\n\n  const result = findDefaultMicrofrontendsPackages(opts);\n\n  if (!result) {\n    throw new Error(\n      'Error trying to resolve the main microfrontends configuration',\n    );\n  }\n\n  // Cache the result\n  configCache[cacheKey] = result;\n  return result;\n}\n","export const CONFIGURATION_FILENAMES = [\n  'microfrontends.jsonc',\n  'microfrontends.json',\n] as const;\n","import fs from 'node:fs';\nimport path from 'node:path';\n\n/**\n * Given a repository root, determine if the repository is using the workspace feature of any package manager.\n *\n * Supports npm, yarn, pnpm, bun, and vlt\n */\nexport function isMonorepo({\n  repositoryRoot,\n}: {\n  repositoryRoot: string;\n}): boolean {\n  try {\n    // pnpm can be validated just by the existence of the pnpm-workspace.yaml file\n    if (fs.existsSync(path.join(repositoryRoot, 'pnpm-workspace.yaml'))) {\n      return true;\n    }\n\n    // vlt can be validated just by the existence of the vlt-workspaces.json file\n    if (fs.existsSync(path.join(repositoryRoot, 'vlt-workspaces.json'))) {\n      return true;\n    }\n\n    // NX can be validated by checking the environment variable.\n    if (process.env.NX_WORKSPACE_ROOT === path.resolve(repositoryRoot)) {\n      return true;\n    }\n\n    // all the rest need packages defined in root package.json\n    const packageJsonPath = path.join(repositoryRoot, 'package.json');\n    if (!fs.existsSync(packageJsonPath)) {\n      return false;\n    }\n\n    const packageJson = JSON.parse(\n      fs.readFileSync(packageJsonPath, 'utf-8'),\n    ) as {\n      workspaces?: string[] | Record<string, string>;\n    };\n\n    return packageJson.workspaces !== undefined;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Error determining if repository is a monorepo', error);\n    return false;\n  }\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nconst PACKAGE_JSON = 'package.json';\n\n/**\n * Find the package root by looking for the closest package.json.\n *\n */\nexport function findPackageRoot(startDir?: string): string {\n  let currentDir = startDir || process.cwd();\n\n  while (currentDir !== path.parse(currentDir).root) {\n    const pkgJsonPath = path.join(currentDir, PACKAGE_JSON);\n\n    // Check for a .git directory (not a file)\n    if (fs.existsSync(pkgJsonPath)) {\n      return currentDir;\n    }\n\n    currentDir = path.dirname(currentDir);\n  }\n\n  throw new Error(\n    'Package root not found. Specify the root of the package with the `package.root` option.',\n  );\n}\n","import fs from 'node:fs';\nimport { join } from 'node:path';\nimport { CONFIGURATION_FILENAMES } from '../../constants';\n\nexport function findConfig({ dir }: { dir: string }): string | null {\n  for (const filename of CONFIGURATION_FILENAMES) {\n    const maybeConfig = join(dir, filename);\n    if (fs.existsSync(maybeConfig)) {\n      return maybeConfig;\n    }\n  }\n\n  return null;\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { MicrofrontendError } from '../../errors';\n\n/**\n * Returns the application name and any additional context that we need.\n */\nexport function getApplicationContext(opts?: {\n  appName?: string;\n  packageRoot?: string;\n}): {\n  name: string;\n} {\n  if (opts?.appName) {\n    return { name: opts.appName };\n  }\n\n  // If this is NX, there are many different places the name can be and they\n  // might not even have a package.json. Use the environment variable, which\n  // relies on NX's logic to find the name.\n  if (process.env.NX_TASK_TARGET_PROJECT) {\n    return { name: process.env.NX_TASK_TARGET_PROJECT };\n  }\n\n  try {\n    // load the package.json for the application\n    const packageJsonString = fs.readFileSync(\n      path.join(opts?.packageRoot || '.', 'package.json'),\n      'utf-8',\n    );\n    const packageJson = JSON.parse(packageJsonString) as { name?: string };\n\n    if (!packageJson.name) {\n      throw new MicrofrontendError(\n        `package.json file missing required field \"name\"`,\n        {\n          type: 'packageJson',\n          subtype: 'missing_field_name',\n          source: '@vercel/microfrontends/next',\n        },\n      );\n    }\n\n    return { name: packageJson.name };\n  } catch (err) {\n    throw MicrofrontendError.handle(err, {\n      fileName: 'package.json',\n    });\n  }\n}\n","import path from 'node:path';\nimport {\n  MFE_CONFIG_DEFAULT_FILE_PATH,\n  MFE_CONFIG_DEFAULT_FILE_NAME,\n} from '../constants';\n\nexport function getOutputFilePath(): string {\n  return path.join(MFE_CONFIG_DEFAULT_FILE_PATH, MFE_CONFIG_DEFAULT_FILE_NAME);\n}\n","/**\n * Default path to use for the microfrontends configuration when output to a file.\n */\nexport const MFE_CONFIG_DEFAULT_FILE_PATH = 'microfrontends' as const;\n\n/**\n * Default name to use for the microfrontends configuration when output to a file.\n */\nexport const MFE_CONFIG_DEFAULT_FILE_NAME = 'microfrontends.json' as const;\n","import { parse } from 'jsonc-parser';\nimport { Ajv, type ErrorObject } from 'ajv';\nimport type { Config } from '../../schema/types';\nimport { MicrofrontendError } from '../../errors';\nimport { SCHEMA } from '../../schema/utils/load';\n\n// NOTE(mknichel): AJV returns very imprecise validation errors that include\n// multiple conflicting statements. We should improve this in the future.\nfunction filterAjvErrors(\n  errors: ErrorObject[] | null | undefined,\n): ErrorObject[] {\n  if (!errors) {\n    return [];\n  }\n  return errors.filter((error) => {\n    return (\n      error.keyword === 'additionalProperties' || error.keyword === 'required'\n    );\n  });\n}\n\nexport function validateSchema(configString: string): Config {\n  const parsedConfig = parse(configString) as Config;\n  const ajv = new Ajv();\n  const validate = ajv.compile(SCHEMA);\n  const isValid = validate(parsedConfig);\n  if (!isValid) {\n    throw new MicrofrontendError(\n      `Invalid microfrontends config:\\n - ${ajv.errorsText(filterAjvErrors(validate.errors), { separator: '\\n - ' })}\\n\\nSee https://openapi.vercel.sh/microfrontends.json for the schema.`,\n      { type: 'config', subtype: 'does_not_match_schema' },\n    );\n  }\n  return parsedConfig;\n}\n","{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$ref\": \"#/definitions/Config\",\n  \"definitions\": {\n    \"Config\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/MainConfig\"\n        },\n        {\n          \"$ref\": \"#/definitions/ChildConfig\"\n        }\n      ]\n    },\n    \"MainConfig\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"$schema\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\",\n          \"const\": \"1\"\n        },\n        \"options\": {\n          \"$ref\": \"#/definitions/Options\"\n        },\n        \"applications\": {\n          \"$ref\": \"#/definitions/ApplicationRouting\",\n          \"description\": \"Mapping of application names to the routes that they host. Only needs to be defined in the application that owns the primary microfrontend domain\"\n        }\n      },\n      \"required\": [\"applications\"],\n      \"additionalProperties\": false\n    },\n    \"Options\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"vercel\": {\n          \"$ref\": \"#/definitions/VercelOptions\",\n          \"description\": \"Microfrontends wide options for Vercel.\",\n          \"deprecated\": \"This is being replaced by the `disableOverrides` field below.\"\n        },\n        \"disableOverrides\": {\n          \"type\": \"boolean\",\n          \"description\": \"If you want to disable the overrides for the site. For example, if you are managing rewrites between applications externally, you may wish to disable the overrides on the toolbar as they will have no effect.\"\n        },\n        \"localProxy\": {\n          \"$ref\": \"#/definitions/LocalProxyOptions\",\n          \"description\": \"Options for local proxy.\",\n          \"deprecated\": \"This is being replaced by the `localProxyPort` field below.\"\n        },\n        \"localProxyPort\": {\n          \"type\": \"number\",\n          \"description\": \"The port number used by the local proxy server.\\n\\nThe default is `3024`.\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"VercelOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"disableOverrides\": {\n          \"type\": \"boolean\",\n          \"description\": \"If you want to disable the overrides for the site. For example, if you are managing rewrites between applications externally, you may wish to disable the overrides on the toolbar as they will have no effect.\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"LocalProxyOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"port\": {\n          \"type\": \"number\",\n          \"description\": \"The port number used by the local proxy server.\\n\\nThe default is `3024`.\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"ApplicationRouting\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"$ref\": \"#/definitions/Application\"\n      },\n      \"propertyNames\": {\n        \"description\": \"The unique identifier for a Microfrontend Application. Must match the `name` field of the application's `package.json`.\"\n      }\n    },\n    \"Application\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/DefaultApplication\"\n        },\n        {\n          \"$ref\": \"#/definitions/ChildApplication\"\n        }\n      ]\n    },\n    \"DefaultApplication\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"vercel\": {\n          \"$ref\": \"#/definitions/Vercel\",\n          \"deprecated\": \"This is being replaced by the `projectId` field below.\"\n        },\n        \"projectId\": {\n          \"type\": \"string\",\n          \"description\": \"Vercel project ID\"\n        },\n        \"production\": {\n          \"$ref\": \"#/definitions/HostConfig\",\n          \"deprecated\": \"This is a duplicate of the `development.fallback` field and this will be removed soon.\"\n        },\n        \"development\": {\n          \"$ref\": \"#/definitions/Development\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Vercel\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"projectId\": {\n          \"type\": \"string\",\n          \"description\": \"Vercel project ID\"\n        }\n      },\n      \"required\": [\"projectId\"],\n      \"additionalProperties\": false\n    },\n    \"HostConfig\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"protocol\": {\n          \"type\": \"string\",\n          \"enum\": [\"http\", \"https\"],\n          \"description\": \"The protocol to be used for the connection.\\n- `http`: Hypertext Transfer Protocol (HTTP).\\n- `https`: Secure Hypertext Transfer Protocol (HTTPS).\\n\\n*\"\n        },\n        \"host\": {\n          \"type\": \"string\",\n          \"description\": \"The hostname or IP address of the server. This can be a domain name (e.g., `example.com`) or an IP address (e.g., `192.168.1.1`).\"\n        },\n        \"port\": {\n          \"type\": \"number\",\n          \"description\": \"The port number to be used for the connection. Common values include `80` for HTTP and `443` for HTTPS.\"\n        }\n      },\n      \"required\": [\"host\"],\n      \"additionalProperties\": false\n    },\n    \"Development\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"local\": {\n          \"$ref\": \"#/definitions/LocalHostConfig\",\n          \"deprecated\": \"This is being replaced by the `localPort` field below.\"\n        },\n        \"localPort\": {\n          \"type\": \"number\",\n          \"description\": \"The local port number that this application runs on when it is running locally. Common values include `80` for HTTP and `443` for HTTPS.\"\n        },\n        \"fallback\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/HostConfig\"\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"description\": \"Fallback for local development, could be a host config that points to any environment. If this is not provided, or the application is not running - requests to the application in local development will error.\\n\\nIf passing a string, include the protocol (optional), host (required) and port (optional). For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTPS. If omitted, the port defaults to `80` for HTTP and `443` for HTTPS.\"\n        },\n        \"task\": {\n          \"type\": \"string\",\n          \"description\": \"Optional task to run when starting the development server. Should reference a script in the package.json of the application.\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"LocalHostConfig\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"host\": {\n          \"type\": \"string\",\n          \"description\": \"The hostname or IP address of the server. This can be a domain name (e.g., `example.com`) or an IP address (e.g., `192.168.1.1`).\"\n        },\n        \"protocol\": {\n          \"type\": \"string\",\n          \"enum\": [\"http\", \"https\"],\n          \"description\": \"The protocol to be used for the connection.\\n- `http`: Hypertext Transfer Protocol (HTTP).\\n- `https`: Secure Hypertext Transfer Protocol (HTTPS).\\n\\n*\"\n        },\n        \"port\": {\n          \"type\": \"number\",\n          \"description\": \"The port number to be used for the connection. Common values include `80` for HTTP and `443` for HTTPS.\"\n        }\n      }\n    },\n    \"ChildApplication\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"vercel\": {\n          \"$ref\": \"#/definitions/Vercel\",\n          \"deprecated\": \"This is being replaced by the `projectId` field below.\"\n        },\n        \"projectId\": {\n          \"type\": \"string\",\n          \"description\": \"Vercel project ID\"\n        },\n        \"production\": {\n          \"$ref\": \"#/definitions/HostConfig\",\n          \"deprecated\": \"This is a duplicate of the `development.fallback` field and this will be removed soon.\"\n        },\n        \"development\": {\n          \"$ref\": \"#/definitions/Development\"\n        },\n        \"routing\": {\n          \"$ref\": \"#/definitions/Routing\",\n          \"description\": \"Groups of path expressions that are routed to this application.\"\n        }\n      },\n      \"required\": [\"routing\"],\n      \"additionalProperties\": false\n    },\n    \"Routing\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/PathGroup\"\n      }\n    },\n    \"PathGroup\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"group\": {\n          \"type\": \"string\",\n          \"description\": \"Optional group name for the paths\"\n        },\n        \"flag\": {\n          \"type\": \"string\",\n          \"description\": \"flag name that can be used to enable/disable all paths in the group\"\n        },\n        \"paths\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"required\": [\"paths\"],\n      \"additionalProperties\": false\n    },\n    \"ChildConfig\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"$schema\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\",\n          \"const\": \"1\"\n        },\n        \"options\": {\n          \"$ref\": \"#/definitions/Options\"\n        },\n        \"partOf\": {\n          \"type\": \"string\",\n          \"description\": \"Applications that only serve a subset of the microfrontend routes only need to reference the name of the primary application that owns the full microfrontends configuration.\"\n        }\n      },\n      \"required\": [\"partOf\"],\n      \"additionalProperties\": false\n    }\n  }\n}\n","import type { JSONSchema7 } from 'json-schema';\nimport jsonSchema from '../../../../schema/schema.json';\n\nexport const SCHEMA = jsonSchema as JSONSchema7;\n","import { existsSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { cwd } from 'node:process';\n\nexport type Framework = 'sveltekit' | 'react-router' | 'unknown';\n\nexport function detectFramework(): Framework {\n  if (existsSync(join(cwd(), 'svelte.config.js'))) {\n    return 'sveltekit';\n  }\n  if (\n    existsSync(join(cwd(), 'react-router.config.js')) ||\n    existsSync(join(cwd(), 'react-router.config.ts'))\n  ) {\n    return 'react-router';\n  }\n  return 'unknown';\n}\n","import type { Plugin, UserConfig } from 'vite';\nimport { MicrofrontendsServer } from '../config/microfrontends/server';\nimport { getApplicationContext } from '../config/microfrontends/utils/get-application-context';\nimport { detectFramework } from './detect-framework';\n\ninterface MicrofrontendsViteOptions {\n  /**\n   * An optional base path to use instead of an asset prefix. This will prefix\n   * _all_ paths in an application with the provided string. This can be used\n   * when it is okay if every path has a common path prefix. If an application\n   * has URLs that don't share a common path prefix, omit this option.\n   *\n   * See https://vite.dev/guide/build#public-base-path for more information.\n   */\n  basePath?: string;\n}\n\n/**\n * Set up Vite with necessary configuration for microfrontends. This should be\n * used with any framework that uses Vite as the bundler.\n *\n * Example usage:\n *\n * ```filename=\"vite.config.ts\"\n * import { microfrontends } from '@vercel/microfrontends/experimental/vite';\n * export default defineConfig({\n *   plugins: [microfrontends()],\n * });\n * ```\n */\nexport function microfrontends(opts?: MicrofrontendsViteOptions): Plugin {\n  const { name: fromApp } = getApplicationContext();\n  const microfrontendsObj = MicrofrontendsServer.infer({\n    meta: {\n      fromApp,\n    },\n  });\n  const app = microfrontendsObj.config.getApplication(fromApp);\n\n  if (app.isDefault() && opts?.basePath) {\n    throw new Error(\n      '`basePath` can not be set for the default microfrontends application.',\n    );\n  }\n  if (opts?.basePath && !opts.basePath.startsWith('/')) {\n    throw new Error('`basePath` must start with a `/`');\n  }\n\n  const additionalConfigOptions: UserConfig = {};\n\n  const framework = detectFramework();\n  if (!app.isDefault()) {\n    if (opts?.basePath) {\n      // The base path is not set for React Router on Vercel since it results\n      // in a double prefixing of the base path.\n      if (framework !== 'react-router' || !process.env.VERCEL_ENV) {\n        let basePath = opts.basePath;\n        // In the local development build->start use case, React Router has a\n        // bug that it won't prefix the assets correctly unless you have a\n        // trailing slash. This is not needed in production.\n        if (process.env.NODE_ENV === 'production' && !basePath.endsWith('/')) {\n          basePath = `${basePath}/`;\n        }\n        additionalConfigOptions.base = basePath;\n      }\n    } else if (framework !== 'sveltekit') {\n      // SvelteKit assets are already prefixed using svelte.config.js.\n      additionalConfigOptions.experimental = {\n        renderBuiltUrl(filename, { type }) {\n          if (type === 'asset') {\n            return `/${app.getAssetPrefix()}/${filename}`;\n          }\n        },\n      };\n    }\n    if (framework === 'react-router') {\n      // Asset prefixing is handled automatically by changing the assetsDir\n      // to the correct path.\n      additionalConfigOptions.build = {\n        assetsDir: `./${opts?.basePath ?? app.getAssetPrefix()}`,\n      };\n    }\n  }\n  if (app.development.local.port) {\n    additionalConfigOptions.server = {\n      port: app.development.local.port,\n    };\n  }\n  return {\n    name: 'vite-plugin-vercel-microfrontends',\n    config: () => {\n      return {\n        ...additionalConfigOptions,\n        define: {\n          'import.meta.env.MFE_CURRENT_APPLICATION': JSON.stringify(app.name),\n          'import.meta.env.MFE_CONFIG': JSON.stringify(\n            microfrontendsObj.config.getConfig(),\n          ),\n        },\n      };\n    },\n  };\n}\n"],"mappings":"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","names":["fs","dirname","path","pathToRegexp","path","pathToRegexp","packageJsonPath","dirname","readFileSync","parse","fg","configCache","fg","readFileSync","parse","dirname","fs","path","fs","path","fs","fs","fs","path","fs","path","path","path","parse","parse","fs","dirname","isMonorepo","join"]}