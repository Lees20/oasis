import{f as o}from"./chunk-2NER6YV7.js";import{dirname as x,join as f,relative as O,resolve as F}from"node:path";import{readFileSync as c,existsSync as A}from"node:fs";import j from"execa";import g from"find-up";import{watch as I}from"chokidar";import w from"fast-glob";import{findConfig as v}from"@vercel/microfrontends/microfrontends/utils";import{parse as b}from"jsonc-parser";import S from"node:events";var u=new S;function m(r,e){u.emit("event",{type:r,data:e})}function h(r){return u.addListener("event",r),()=>{u.removeListener("event",r)}}function er(){try{try{let e=p();if(e){let t=f(e,".vercel","repo.json");if(A(t)){o("Found vercel repo directory",t);let n=JSON.parse(c(t,"utf8"));o("Found vercel repo.json",n);let i=O(e,process.cwd()),s=n.projects.find(a=>a.directory===i);if(s)return{ownerId:n.orgId,projectId:s.id}}}}catch(e){o("Error finding vercel repo",e)}let r=g.sync(e=>g.sync.exists(f(e,".vercel","project.json"))?e:void 0,{type:"directory"});if(o("Found vercel directory",r),r){let e=JSON.parse(c(f(r,".vercel","project.json"),"utf8"));return o("Found vercel project.json",e),{ownerId:e.orgId,projectId:e.projectId}}console.log("[vercel-toolbar] No project info found. Make sure you run `vc link` in your project directory.")}catch(r){o("Error finding project info",r);return}}function C(r){try{return c(F(r),"utf-8")}catch(e){throw o("Error reading microfrontend config",e),new Error(`Error parsing microfrontend config: ${e.message}`)}}function N(){let r=g.sync("package.json");if(!r)return;let t=JSON.parse(c(r,"utf-8")).name,n=w.globSync("**/{microfrontends.json,microfrontends.jsonc}",{cwd:p(),absolute:!0,onlyFiles:!0,followSymbolicLinks:!1,ignore:["**/node_modules/**","**/.git/**"]});for(let i of n){let s=c(i,"utf-8"),a=b(s);if("applications"in a&&Object.keys(a.applications).includes(t))return i}}function P(){try{let r=v({dir:"."});if(!r)return N();let e=c(r,"utf-8"),t=b(e);if("partOf"in t){let i=R(t.partOf);if(!i)throw new Error(`Could not find default application "${t.partOf}" in repository`);return v({dir:i})??void 0}return r}catch{return}}function R(r){let e=w.globSync("**/package.json",{cwd:p(),absolute:!0,onlyFiles:!0,followSymbolicLinks:!1,ignore:["**/node_modules/**","**/.git/**"]}),t;for(let n of e){let i=c(n,"utf-8");if(JSON.parse(i).name===r){t=n;break}}return t?x(t):void 0}function d(){try{let r=j.sync("git",["branch","--show-current"]);if(!r.stdout&&r.stderr){o("Error getting current git branch",r.stderr);return}return r.stdout.trim()}catch(r){o("Error getting current git branch",r);return}}function p(){try{let r=j.sync("git",["rev-parse","--show-toplevel"]);if(!r.stdout&&r.stderr){o("Error getting git directory",r.stderr);return}return r.stdout.trim()}catch(r){o("Error getting git directory",r);return}}var y;function E(){if(y)return;let r=p();if(!r)return;let e=d(),t=f(r,".git","HEAD");y=I(t).on("change",()=>{let n=d();n!==e&&(e=n,m("branch-change",e))})}import M from"node:url";import{createServer as _}from"node:http";import k from"node:path";import{App as L}from"@tinyhttp/app";import T from"execa";import B from"strip-ansi";var J=k.dirname(M.fileURLToPath(import.meta.url)),D=new L().use((r,e,t)=>{e.setHeader("Access-Control-Allow-Origin","*"),t()}).options("/events",(r,e)=>{e.writeHead(200,{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"OPTIONS, GET","Access-Control-Allow-Headers":r.headers["access-control-request-headers"]}),e.end()}).get("/events",(r,e)=>{e.writeHead(200,{"Content-Type":"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive"});let t=h(n=>{e.write(`event: ${n.type}
data:${JSON.stringify(n.data)}

`)});e.on("close",t)}).get("/branch",(r,e)=>{e.json({branch:d()})}).get("/microfrontend-config",(r,e)=>{try{let t=P(),n=t?C(t):null;e.json({contents:n})}catch(t){e.status(500).json({error:t.message})}});function ur({portFromConfig:r}){let e=r??V(),t=_((n,i)=>D.handler(n,i));return t.unref(),t.on("error",n=>{o("Toolbar dev server error",n)}),t.listen(e,()=>{o(`Toolbar dev server listening on port ${e}`),E()}),e}var l=43214;function V(){try{let r=T.sync("node",[k.join(J,J.endsWith("dist")?".":"..","scripts","get-free-port.cjs")]);if(!r.stdout&&r.stderr)return o("Unexpected error when getting a free port",r.stderr),l;let e=Number(B(r.stdout).trim());return Number.isNaN(e)?(o(`Error parsing free port: '${r.stdout}'`),l):e}catch(r){return o("Error running the get-free-port script",r),l}}export{er as a,d as b,ur as c};
